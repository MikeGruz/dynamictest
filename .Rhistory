theme_minimal() + theme(axis.text.x = element_text(angle=45, hjust=1))
gss.relig = gss %>%
# weight individuals
mutate(weight.ind = wtss/sum(wtss),
# recode all others to '5' (other)
relig = ifelse(!(relig %in% c(1,2,3,4,9)), 5, relig)) %>%
group_by(relig) %>%
summarise(perc = sum(weight.ind))
# factor stuff
gss.relig$faith = c("Protestant",
"Catholic",
"Jewish",
"None",
"Other",
"Muslim")
gss.relig$faith = factor(gss.relig$faith,
levels=unique(gss.relig$faith)[c(1,2,3,6,5,4)])
ggplot(gss.relig, aes(x="", y=perc, fill=faith)) +
geom_bar(width=1, stat="identity") + coord_polar("y", start = pi/3) +
scale_fill_grey() + theme_minimal() + ylab("") + xlab("") +
theme(legend.title=element_blank(), axis.text.x=element_blank())
gss.ideo.science = gss %>%
mutate(x=1) %>%
group_by(polviews, consci) %>%
summarise(total = sum(x)) %>%
mutate(perc = (total/sum(total))*100) %>%
filter(consci==1 & !is.na(polviews))
ggplot(gss.ideo.science, aes(x=polviews, y=perc)) + geom_line() +
theme_minimal() + ylim(c(0,50)) + ylab("% Who Trust Science a Great Deal") +
xlab("Conservatism") + scale_x_continuous(breaks=1:7)
ggplot(filter(polls2016, date > '2016-10-01'), aes(x=Clinton)) + geom_density() +
theme_minimal()
ggplot(filter(polls2016, date > '2016-09-01'), aes(x=Trump)) + geom_density() +
theme_minimal()
nes.party = nes %>%
mutate(weight = weight_ftf/sum(weight_ftf)) %>%
mutate(party =
ifelse(pid_self==1 & pid_strong==1, 1,
ifelse(pid_self==1 & pid_strong==2, 2,
ifelse(pid_self==3, 3,
ifelse(pid_self==2 & pid_strong==2, 4,
ifelse(pid_self==2 & pid_strong==1, 5, NA
)))))
) %>%
group_by(party) %>%
summarise(perc = sum(weight)) %>%
filter(!is.na(party))
# factor stuff
nes.party$party = c("Strong Democrat",
"Weak Democrat",
"Independent",
"Weak Republican",
"Strong Republican")
nes.party$party = factor(nes.party$party, levels=unique(nes.party$party))
ggplot(nes.party, aes(x=party, y=perc)) +
geom_col(fill='grey', colour='black', alpha=.7) +
theme_minimal() + theme(axis.text.x = element_text(angle=45, hjust=1)) +
xlab("") + ylab("")
pres.compare = read_csv("elections2012-2016.csv") %>%
mutate(trump.win = trump_count/(trump_count+clinton_count),
romney.win = romney_count/(romney_count+obama_count))
ggplot(pres.compare, aes(x=romney.win, y=trump.win)) + geom_point() +
theme_minimal() + xlim(c(0,1)) + ylim(c(0,1)) +
ylab("Trump Percentage of Two-Party Vote (2016)") +
xlab("Romney Percentage of Two-Party Vote (2012)")
# get hearings into yearly percentages
hearings.yearly = hearings %>%
mutate(x = 1) %>%
group_by(year, majortopic) %>%
summarise(total = sum(x)) %>%
mutate(cong.perc = total/sum(total)) %>%
select(year, majortopic, cong.perc)
mip = mip %>%
select(year, majortopic, mip.perc = percent)
# merge
cong.mip = full_join(hearings.yearly, mip, by=c('year','majortopic'))
ggplot(data = filter(cong.mip, majortopic == 1),
aes(x = cong.perc, y = mip.perc)) +
geom_point() + theme_minimal() +
geom_smooth(method=lm, se=FALSE, colour='black', size=.25) +
xlab("Proportion of Congressional Hearings Focused on Economic Issues") +
ylab("Proportion of Respondents \nSaying Economy is Most Important Problem")
nyt.perc = nyt %>%
mutate(count = 1) %>%
group_by(year, majortopic) %>%
select(year, majortopic, count) %>%
summarise(total = sum(count)) %>%
mutate(nyt.perc = total/sum(total))
mip.nyt = full_join(filter(nyt.perc, majortopic==7),
filter(mip, majortopic==7),
by='year')
ggplot(mip.nyt, aes(x=nyt.perc*100, y=mip.perc*100)) +
geom_smooth(method=lm, colour='black', size=.25, alpha=.2) +
theme_minimal() +
ylab("Percentage of Respondents \nSaying Environment is Most Important Problem") +
xlab("Percentage of NYT Stories Covering Environmental Issues")
# LM stuff
summary(lm(mip.perc~nyt.perc, data=mip.nyt))
lm.df = data.frame(variable=c("Intercept","NYT Coverage"),
coef=c(-.002201, .826376),
se=c(.002512, .167650)) %>%
mutate(upper = coef + 1.998 * se,
lower = coef - 1.998 * se)
ggplot(lm.df, aes(y=variable, x=coef)) + geom_point() +
geom_errorbarh(aes(xmin=lower, xmax=upper), height=0) +
geom_vline(xintercept = 0, linetype='dashed', alpha=.25) +
theme_minimal() + xlab("Estimate") + ylab("Model Term")
set.seed(123)
x = rnorm(500,1,1)
h = function(x) 1+2*x
eps = rnorm(500,0,h(x))
y = 1 + 1*x + eps
het.fit = lm(y~x)
het.df = data_frame(res=het.fit$residuals, fitted=het.fit$fitted.values)
ggplot(het.df, aes(x=fitted, y=res)) + geom_point() +
geom_smooth(method=lm, se=FALSE, size=.25, colour="black") +
theme_minimal() + ylab("Residuals") + xlab("Fitted Values")
# q9 = class, q48 = views on ideologies
pew = read_sav("pew_dec11.sav") %>%
filter(q9 != 9) %>%
mutate(view.cap = ifelse(q48d == 2, 0, ifelse(q48d == 1, 1, NA)),
soc.class = factor(5 - q9)) %>%
select(view.cap, soc.class)
pew.glm = glm(view.cap~soc.class, family=binomial, data=pew)
pew.probs = predict(pew.glm, data.frame(soc.class=factor(0:4)),
type="response", se.fit=TRUE)
pew.preds = data_frame(class = c("Lower","Lower-Middle","Middle","Upper-Middle","Upper"),
prob = pew.probs$fit,
se = pew.probs$se.fit) %>%
mutate(lower = prob - 1.96*se,
upper = prob + 1.96*se)
pew.preds$class = factor(pew.preds$class, levels=unique(pew.preds$class))
ggplot(pew.preds, aes(x=class, y=prob)) + geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=0) + ylim(c(0,1.0)) +
ylab("Predicted Probability of Agreeing with Capitalism") +
xlab("Self-Reported Social Class") + theme_minimal()
obama.approve = read.csv('obama_approval.csv') %>%
mutate(date = as.Date(Date, format='%m/%d/%y')) %>%
select(date, Approve, Disapprove) %>%
gather(key, value, -date)
ggplot(obama.approve, aes(x=date, y=value)) + geom_line(aes(linetype=key)) +
ylim(c(0,80)) + scale_x_date(date_labels="%Y", date_breaks="year") +
theme_minimal() + ylab("% of Respondents") + xlab("") +
theme(axis.text.x = element_text(angle=45, hjust=1), legend.title=element_blank())
read.csv("turnout.csv") %>%
ggplot(aes(x=year, y=turnout)) + geom_line() +
geom_smooth(method=lm, se=FALSE, colour='black', linetype='dashed', size=.25) +
scale_y_continuous(labels=comma, limits=c(40000000, 140000000)) +
ylab("Voter Turnout in the United States") + xlab("") + theme_minimal()
outlier.df = data_frame(
x = runif(100, 1, 7),
y = -.5 + 1.2*x + rnorm(100, 0, 1)
) %>%
mutate(y = ifelse(x>6, y + 7, y))
ggplot(outlier.df, aes(x=x, y=y)) + geom_point() +
geom_smooth(method=lm, se=FALSE, colour="black", size=.25) +
theme_minimal()
require(car)
#full.att = full_join(mip.nyt, hearings.yearly, by=c("year","majortopic"))
full.att = full_join(hearings.yearly, mip, by=c("year","majortopic"))
full.att = full_join(full.att, nyt.perc, by=c("year","majortopic"))
# summary of Congressional and public attention to Civil Rights
# no effect for pub. attention, positive effect for Congressional attention
att.fit = lm(nyt.perc~cong.perc+mip.perc, filter(full.att, majortopic==3))
summary(att.fit)
# added variable plot
av = avPlots(att.fit)
av.cong = as_data_frame(av$cong.perc) %>%
select(nyt.perc, values=cong.perc) %>%
mutate(iv = "% Congressional Hearings")
av.mip = as_data_frame(av$mip.perc) %>%
select(nyt.perc, values=mip.perc) %>%
mutate(iv = "% Most Important Problem")
av = rbind(av.cong, av.mip)
ggplot(av, aes(x=values, y=nyt.perc)) + geom_point() + facet_grid(.~iv, scales="free") +
geom_smooth(method=lm, se=FALSE, colour="black", size=.25) +
ylab("% NYT Coverage of Civil Rights") + xlab("") + theme_minimal()
ggplot(pres.compare, aes(x=romney.win, y=trump.win)) + geom_point() +
theme_minimal() + xlim(c(0,1)) + ylim(c(0,1)) +
ylab("Trump Percentage of Two-Party Vote (2016)") +
xlab("Romney Percentage of Two-Party Vote (2012)") +
geom_hline(yintercept = .5) + geom_vline(xintercept = .5)
ggplot(pres.compare, aes(x=romney.win, y=trump.win)) + geom_point() +
theme_minimal() + xlim(c(0,1)) + ylim(c(0,1)) +
ylab("Trump Percentage of Two-Party Vote (2016)") +
xlab("Romney Percentage of Two-Party Vote (2012)") +
geom_hline(yintercept = .5, size=.25, linetype='dashed') + geom_vline(xintercept = .5)
ggplot(pres.compare, aes(x=romney.win, y=trump.win)) + geom_point() +
theme_minimal() + xlim(c(0,1)) + ylim(c(0,1)) +
ylab("Trump Percentage of Two-Party Vote (2016)") +
xlab("Romney Percentage of Two-Party Vote (2012)") +
geom_hline(yintercept = .5, size=.25, linetype='dashed') +
geom_vline(xintercept = .5, size=.25, linetype='dashed')
?geom_abline
ggplot(pres.compare, aes(x=romney.win, y=trump.win)) + geom_point() +
theme_minimal() + xlim(c(0,1)) + ylim(c(0,1)) +
ylab("Trump Percentage of Two-Party Vote (2016)") +
xlab("Romney Percentage of Two-Party Vote (2012)") +
geom_hline(yintercept = .5, size=.25, linetype='dashed') +
geom_vline(xintercept = .5, size=.25, linetype='dashed') +
geom_abline(intercept=0, slope=1)
ggplot(pres.compare, aes(x=romney.win, y=trump.win)) + geom_point() +
theme_minimal() + xlim(c(0,1)) + ylim(c(0,1)) +
ylab("Trump Percentage of Two-Party Vote (2016)") +
xlab("Romney Percentage of Two-Party Vote (2012)") +
geom_hline(yintercept = .5, size=.25, linetype='dashed', colour='grey') +
geom_vline(xintercept = .5, size=.25, linetype='dashed', colour='grey') +
geom_abline(intercept=0, slope=1, size=.5)
runApp('~/Dropbox/Academic/inProgress/2016_election_sim/statepolls')
pres.compare
View(pres.compare)
runApp('~/Dropbox/Academic/inProgress/2016_election_sim/statepolls')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
genProblem <- function() {
pset <-  sample(c("reg","ttest"), size=1, replace=T)
problem <-  switch(pset,
"mean" = meanTest(),
"median" = medianTest(),
"min" = minTest(),
"max" = maxTest(),
"multichoice" = multTest(),
"ttest" = tTest(),
"reg" = regTest()
)
return(problem)
}
genProblem <- function() {
pset <-  sample(c("reg"), size=1, replace=T)
problem <-  switch(pset,
"mean" = meanTest(),
"median" = medianTest(),
"min" = minTest(),
"max" = maxTest(),
"multichoice" = multTest(),
"ttest" = tTest(),
"reg" = regTest()
)
return(problem)
}
genProblem()
genProblem()$solution
genProblem()$solution
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
problem <- reactive(genProblem())
isolate(problem)
isolate(problem$solution)
isolate(problem)$solution
isolate(problem)
print(isolate(problem))
problem()$solution
isolate(problem()$solution)
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
genProblem()
genProblem()
prob <- reactive(genProblem())
prob()
isolate(prob())
isolate(prob())
isolate(prob()$solution)
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
?reactive
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
environment()
f <- function() return(environment())
f()
x <- reactiveValues()
x$problem <- genProblem()
x$problem
x()$problem
isolate(x()$problem)
isolate(x)
x <- reactive()
isolate(x())
x <- reactiveValues()
x$data <- NULL
x
x$data
isolate(x$data)
prob <- reactiveValues()
prob$problem <- genProblem()
isolate(prob$problem)
isolate(prob$problem$solution)
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
do.call(regTest, ())
do.call(regTest, "")
do.call(regTest, list=())
do.call(regTest, list=c())
?do.call
do.call(regTest, args=())
do.call(regTest, args=c())
do.call(regTest, args=NULL)
do.call(regTest, args=list())
do.call(regTest, args=list())
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
list.files()
setwd('~/Academic/Programming/Shiny/dynamicTest')
list.files('./tests')
x <- list.files('./tests')
lapply(x, print)
runApp()
runApp()
list.files()
list.files("*.R")
list.files("\\.R$")
list.files("*\\.R$")
list.files("*\.R$")
list.files("*\\.R")
list.files("\*\\.R")
list.files()
list.files('')
list.files("./")
list.files("./", pattern="\\.R")
runApp()
runApp()
runApp()
testfiles <- list.files("", pattern="\\.R")
testfiles
list.files()
testfiles <- list.files(".", pattern="\\.R")
testfiles
runApp()
sapply(testfiles, function(x){sub("\\.R","")})
sapply(testfiles, function(x){sub("\\.R","", x)})
lapply(testfiles, function(x){sub("\\.R","", x)})
apply(testfiles, function(x){sub("\\.R","", x)})
sapply(testfiles, function(x){sub("\\.R","", x)})
sapply(testfiles, function(x){sub("\\.R","", x)})[1]
runApp()
do.call(regTest, args=list())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
View(regress)
regress
rm(list=ls())
runApp()
runApp()
list(c('mike','kate'))
unlist(list(c('mike','kate')))
?parseQueryString
parseQueryString("?test=mike")
parseQueryString("?test=mike")$test
runApp()
runApp()
parseQueryString("http://www.google.com/?search=mike")
parseQueryString("http://www.google.com/?search=mike")$search
query <- parseQueryString("http://www.google.com/?search=mike")
query$search
query[['search']]
paste(names(query))
query <- parseQueryString("?search=mike")
query
paste(names(query))
paste(names(query), query, sep="=", collapse=", ")
parseQueryString("/?test=regress&ttest")
parseQueryString("/?test=regress&test=ttest")
parseQueryString("?test=regress&test=ttest")
runApp()
runApp()
x = c('mike','kate')
paste(x)
paste(x, sep=',')
collapse(x, sep=',')
paste0(x, sep=',')
?paste
paste(x, sep=',', collapse=T)
paste(x, collapse=",")
runApp()
runApp()
runApp()
runApp()
parseQueryString('?test=regress&test=ttest')
c(parseQueryString('?test=regress&test=ttest'))
unlist(parseQueryString('?test=regress&test=ttest'))
length(unlist(parseQueryString('?test=regress&test=ttest')))
parseQueryString('?test=regress&test=ttest')
query <- parseQueryString('?test=regress&test=ttest')
query$test
query['test']
query[['test']]
query <- parseQueryString('?test=regress,ttest')
query
query$test
split(query$test, ',')
?split
strsplit
strsplit(query$test)
strsplit(query$test, split=',')
unlist(strsplit(query$test, split=','))
length(unlist(strsplit(query$test, split=',')))
parseQueryString('?test=regress&test=ttest')
parseQueryString('?test=regress,ttest')
runApp()
runApp()
runApp()
runApp()
parseQueryString('?test=regress')
unlist(parseQueryString('?test=regress'))
parseQueryString('?test=regress,ttest')
parseQueryString('?method=regress,ttest')
strsplit(parseQueryString('?method=regress,ttest'), split=',')
strsplit(unlist(parseQueryString('?method=regress,ttest')), split=',')
unlist(parseQueryString('?method=regress,ttest'))
strsplit(unlist(parseQueryString('?method=regress,ttest')), split=',')
len(strsplit(unlist(parseQueryString('?method=regress,ttest')), split=','))
length(strsplit(unlist(parseQueryString('?method=regress,ttest')), split=','))
strsplit(parseQueryString('?method=regress,ttest'), split=',')
parseQueryString('?method=regress,ttest')
strsplit(parseQueryString('?method=regress,ttest'),split=',')
unlist(parseQueryString('?method=regress,ttest'))
strsplit(unlist(parseQueryString('?method=regress,ttest')),split=',')
mlist = strsplit(unlist(parseQueryString('?method=regress,ttest')),split=',')
list.files()
setwd('./tests')
sapply(mlist, source)
sapply(mlist, function(x){paste(x,'.R',sep='')})
sapply(sapply(mlist, function(x){paste(x,'.R',sep='')}), source)
ttest
mlist = strsplit(unlist(parseQueryString('?method=regress')),split=',')
mlist
mlist
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
rm(list=ls())
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
x <- reactive()
x <- reactiveValues()
x$methods <- c('regress','ttest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
x
isolate(x()$methods)
x()
isolate(x)
isolate(x)$methods
x <- reactiveValues()
x$methods <- c('regress','ttest')
x()$methods
isolate(x()$methods)
isolate(x$methods)
isolate(x$methods)[1]
rm(list=ls())
methodList <- reactiveValues()
query <- parseQueryString("?method=regress,ttest")
methodList$methods <- strsplit(unlist(query), split=",")
isolate(methodList$methods)
sapply(
sapply(methodList$methods, function(x){
paste(x, '.R', sep='')
}), source
)
sapply(isolate(methodList$methods), function(x){
paste(x, '.R', sep='')
}), source
sapply(isolate(methodList$methods), function(x){
paste(x, '.R', sep='')
})
unlist(sapply(isolate(methodList$methods), function(x){
paste(x, '.R', sep='')
}))
sapply(
sapply(isolate(methodList$methods), function(x){
paste(x, '.R', sep='')
}), source
)
rm(list=ls())
methodList <- reactiveValues()
query <- parseQueryString("?method=regress,ttest")
methodList$methods <- strsplit(unlist(query), split=",")
sapply(
sapply(isolate(methodList$methods), function(x){
paste(x, '.R', sep='')
}), source
)
do.call(isolate(methodList$methods)[1], args=list())
isolate(methodList$methods)[1]
sample(isolate(methodList$methods),1)
unlist(isolate(methodList$methods))
unlist(isolate(methodList$methods))[1]
unlist(isolate(methodList$methods))[2]
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
runApp('~/Dropbox/Academic/Programming/Shiny/dynamicTest')
